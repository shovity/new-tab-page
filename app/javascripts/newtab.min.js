const GET_NOTES="GET_NOTES";const POST_NOTES="POST_NOTES";const GET_BOOKMARK="GET_BOOKMARK";const GET_MOSTSITE="GET_MOSTSITE";const ARE_YOU_READY="ARE_YOU_READY";const debug=true;const minWallpaper=false;const wallpaperRandom=true;const showMostSite=true;const wW=window.document.documentElement.clientWidth;const wH=window.document.documentElement.clientHeight;const images=window.imageIndex.map(e=>`images/backgrounds/${e}`);const codeTables=[{code:"date",value:(new Date).toLocaleDateString()},{code:"time",value:(new Date).toLocaleTimeString()}];let port=chrome.runtime.connect({name:"pip"});const requestDelay=1e3;let requsetInterval=null;let backgroundNotReady=true;let notes=[];if(!debug)console.log=(()=>"debug disabled");if(wallpaperRandom){const i=Math.floor(Math.random()*images.length);wall.style.backgroundImage=`url(${images[i]})`}const bookmark={htmlBookmarkBar:window.bookmarkBar,htmlMenu:window.bookmarkContextMenu};bookmark.createItem=(node=>{const{url:url,title:title,children:children}=node;if(children){setTimeout(()=>bookmark.render(node));return""}return`\n  <a class="item" href="${url}">\n    <img src="chrome://favicon/${url}">\n    <div class="title">${title}</div>\n  </a>`});bookmark.createParent=(node=>{const label=node.title;const nodes=node.children;const childs=nodes.map(node=>bookmark.createItem(node)).join("");return`\n  <div class="parent">\n    <div class="parent-header">\n      <span class="icon icon-folder"></span>\n      <div class="label">${label}</div>\n    </div>\n\n    <div class="parent-childs">\n      ${childs}\n    </div>\n  </div>`});bookmark.render=((node,clear=false)=>{if(clear)bookmark.htmlBookmarkBar.innerHTML="";bookmark.htmlBookmarkBar.innerHTML+=bookmark.createParent(node)});const pushState=()=>{port.postMessage({request:POST_NOTES,data:notes})};const createNoteObject=(msg,x,y,w=300,h=100)=>{if(!x||!y){x=Math.floor(Math.random()*(wW-500));y=Math.floor(Math.random()*(wH-250))}return{msg:msg,x:x,y:y,w:w,h:h}};const createNoteHtmlElement=(id,msg,x,y,w,h)=>{return`\n    <div id="noteid-${id}" class="note" style="transform: translate(${x}px, ${y}px)">\n      <div class="box">\n        <div class="note-controls" move-noteid="${id}">\n          <div class="note-remove" remove-noteid="${id}"></div>\n        </div>\n        <div class="rain-bow"><div></div><div></div><div></div></div>\n        <textarea\n          placeholder="new note"\n          editor-noteid="${id}"\n          style="width:${w}px;height:${h-20}px;">${msg}</textarea>\n      </div>\n    </div>\n  `};const addNote=note=>{let{id:id,msg:msg,x:x,y:y,w:w,h:h}=note;if(id===undefined){id=notes.push({id:notes.length,msg:msg,x:x,y:y,w:w,h:h})-1}noteBox.innerHTML+=createNoteHtmlElement(id,msg,x,y,w,h)};const renderNotes=(notes,clear=true)=>{if(clear)noteBox.innerHTML="";notes.forEach(note=>{addNote(note)})};const checkAndReplaceCode=target=>{const string=target.value;const startIndexCode=string.lastIndexOf("[");if(startIndexCode!==-1){const code=string.slice(startIndexCode+1,-1);const object=codeTables.find(e=>e.code===code);if(object)target.value=string.replace(`[${code}]`,object.value)}};{window.noteBox.addEventListener("click",event=>{const{target:target}=event;if(target.getAttribute("remove-noteid")!==null){const noteId=+target.getAttribute("remove-noteid");const noteIndex=notes.findIndex(note=>note.id==noteId);if(noteIndex!==-1)notes.splice(noteIndex,1);renderNotes(notes);pushState()}});let resizeId=false;let moveId=false;let fixX=0;let fixY=0;window.noteBox.addEventListener("mousedown",event=>{const{target:target}=event;if(target.getAttribute("editor-noteid")!==null){const cx=event.clientX;const cy=event.clientY;const noteId=+target.getAttribute("editor-noteid");const noteIndex=notes.findIndex(note=>note.id==noteId);const note=notes[noteIndex];if(note.x+note.w-cx<15&&note.y+note.h-cy<15){resizeId=noteId}}if(target.getAttribute("move-noteid")!==null){const noteId=+target.getAttribute("move-noteid");const noteIndex=notes.findIndex(note=>note.id==noteId);fixX=event.clientX-notes[noteIndex].x;fixY=event.clientY-notes[noteIndex].y;moveId=noteId}});window.addEventListener("mousemove",event=>{if(moveId===false)return;event.preventDefault();const x=event.clientX-fixX;const y=event.clientY-fixY;if(window[`noteid-${moveId}`])window[`noteid-${moveId}`].style.transform=`translate(${x}px, ${y}px)`});window.addEventListener("mouseup",event=>{if(moveId!==false){const x=event.clientX-fixX;const y=event.clientY-fixY;const noteIndex=notes.findIndex(note=>note.id==moveId);if(noteIndex!==-1){notes[noteIndex].x=x;notes[noteIndex].y=y}moveId=false;pushState()}else if(resizeId!==false){const{target:target}=event;const noteIndex=notes.findIndex(note=>note.id==resizeId);const w=window["noteid-"+resizeId].offsetWidth;const h=window["noteid-"+resizeId].offsetHeight;if(noteIndex!==-1){notes[noteIndex].w=w;notes[noteIndex].h=h}resizeId=false;pushState()}});window.noteBox.addEventListener("keyup",event=>{const{target:target}=event;if(target.getAttribute("editor-noteid")!==null){const noteId=+target.getAttribute("editor-noteid");const noteIndex=notes.findIndex(note=>note.id==noteId);if(event.key==="]")checkAndReplaceCode(target);notes[noteIndex].msg=target.value;console.log("edit and save");pushState()}});window.btnAddNote.addEventListener("click",()=>{addNote(createNoteObject(""));pushState();renderNotes(notes)})}{const addWave=(x,y)=>{waveClickBox.innerHTML=`<div class="wave active" style="transform: translate(${x}px, ${y}px)">\n      <div></div>\n      <div></div>\n      <div></div>\n    </div>`};window.addEventListener("mousedown",event=>{const x=event.clientX;const y=event.clientY;addWave(x,y)})}const contextMenu={htmlMenu:window.contextMenu,isOpen:false};contextMenu.open=((x,y,h)=>{const px=x>wW-200?wW-200:x;const py=y>wH-180?wH-180:y+20;contextMenu.isOpen=true;contextMenu.htmlMenu.innerHTML=`<div style='transform: translate(${px}px, ${py}px)'>\n    <div class="cm-i" cmd="kill them">click</div>\n  </div>`});contextMenu.close=(()=>{contextMenu.isOpen=false;contextMenu.htmlMenu.innerHTML=""});window.addEventListener("contextmenu",event=>{return;if(contextMenu.isOpen){contextMenu.close()}else{contextMenu.open(event.clientX,event.clientY)}event.preventDefault()});window.addEventListener("click",event=>{if(!contextMenu.isOpen)return;const{target:target}=event;if(target.className!=="cm-i"){contextMenu.close();event.preventDefault()}else{contextMenu.close()}});port.onMessage.addListener(({request:request,data:data,err:err})=>{if(err)return console.log(err);switch(request){case ARE_YOU_READY:if(data){port.postMessage({request:GET_MOSTSITE});port.postMessage({request:GET_NOTES});backgroundNotReady=false;clearInterval(requsetInterval);requsetInterval=null}else{}break;case GET_BOOKMARK:bookmark.render(data[0].children[0]);break;case GET_MOSTSITE:bookmark.render({children:data,title:"Most visited"},true);port.postMessage({request:GET_BOOKMARK});break;case GET_NOTES:notes=data.notes||[];renderNotes(notes);break;default:console.log("Revice response not match")}});port.postMessage({request:ARE_YOU_READY});if(requsetInterval===null&&backgroundNotReady)requsetInterval=setInterval(()=>{location.reload()},requestDelay);